// <auto-generated />
using DartLeague.Repositories.SeasonData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DartLeague.Web.Data.Migrations.SeasonDb
{
    [DbContext(typeof(SeasonContext))]
    [Migration("20180218045919_Initial Setup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.BoardMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int?>("DeletedBy");

                    b.Property<int>("MemberId");

                    b.Property<int>("PositionId");

                    b.Property<int>("SeasonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("SeasonId");

                    b.ToTable("BoardMembers","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.BoardPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("BoardPositions","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Seasons","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.SeasonLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("FileId");

                    b.Property<int>("LinkType");

                    b.Property<int>("Order");

                    b.Property<int>("SeasonId");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedBy");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonLinks","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<int>("BannerImageId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("LogoImageId");

                    b.Property<string>("Name");

                    b.Property<int>("SeasonId");

                    b.Property<int>("SponsorId");

                    b.Property<int>("TeamPictureImageId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.TeamPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MemberId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayers","season");
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.BoardMember", b =>
                {
                    b.HasOne("DartLeague.Repositories.SeasonData.BoardPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DartLeague.Repositories.SeasonData.Season", "Season")
                        .WithMany("BoardMembers")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.SeasonLink", b =>
                {
                    b.HasOne("DartLeague.Repositories.SeasonData.Season", "Season")
                        .WithMany("SeasonLinks")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.Team", b =>
                {
                    b.HasOne("DartLeague.Repositories.SeasonData.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DartLeague.Repositories.SeasonData.TeamPlayer", b =>
                {
                    b.HasOne("DartLeague.Repositories.SeasonData.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

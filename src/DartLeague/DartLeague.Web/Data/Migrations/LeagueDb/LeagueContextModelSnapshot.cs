// <auto-generated />
using DartLeague.Repositories.LeagueData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;

namespace DartLeague.Web.Data.Migrations.LeagueDb
{
    [DbContext(typeof(LeagueContext))]
    partial class LeagueContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FileId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Activities", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.BrowsableFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("ContentType");

                    b.Property<string>("FileName");

                    b.Property<string>("RelativePath");

                    b.HasKey("Id");

                    b.ToTable("BrowsableFiles", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.DartEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DartStart");

                    b.Property<string>("DartType");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<string>("EventContact");

                    b.Property<string>("EventContact2");

                    b.Property<DateTime>("EventDate");

                    b.Property<DateTime?>("EventEndDate");

                    b.Property<int>("EventTypeId");

                    b.Property<string>("FacebookUrl");

                    b.Property<string>("HostName");

                    b.Property<string>("HostPhone");

                    b.Property<string>("HostUrl");

                    b.Property<int>("ImageFileId");

                    b.Property<bool>("IsTitleEvent");

                    b.Property<string>("LocationName");

                    b.Property<string>("MapUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PosterFile");

                    b.Property<int>("PosterFileId");

                    b.Property<string>("RegistrationEndTime");

                    b.Property<string>("RegistrationStartTime");

                    b.Property<string>("State");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Url");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("DartEvents", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.DartEventResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<string>("Finished");

                    b.Property<int>("MemberId");

                    b.Property<int>("OrderId");

                    b.Property<string>("SpecificEventName");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("DartEventResults", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.LeagueLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FileId");

                    b.Property<int>("LinkType");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("LeagueLinks", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.Lod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FileId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Lods", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.LuckofTheDraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FileId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("LuckOfTheDraws", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptEmail");

                    b.Property<bool>("AcceptText");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("CellPhone");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("HomePhone");

                    b.Property<string>("LastName");

                    b.Property<int>("LeagueId");

                    b.Property<string>("Nickname");

                    b.Property<string>("Notes");

                    b.Property<string>("ShirtSize");

                    b.Property<string>("State");

                    b.Property<int>("UserId");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Members", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.PagePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Html");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PageParts", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Comments");

                    b.Property<string>("ContactName");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FacebookUrl");

                    b.Property<int>("LeagueId");

                    b.Property<string>("MapUrl");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Sponsors", "league");
                });

            modelBuilder.Entity("DartLeague.Repositories.LeagueData.DartEventResult", b =>
                {
                    b.HasOne("DartLeague.Repositories.LeagueData.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
